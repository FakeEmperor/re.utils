set nocompatible

filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub

Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" " Install L9 and avoid a Naming conflict if you've already installed a
" " different version somewhere else.
"Plugin 'ascenator/L9', {'name': 'newL9'}
"
" Status themes
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'



"" Themes here
Plugin 'exitface/synthwave.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'NewProggie/NewProggie-Color-Scheme'
Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'sheerun/vim-polyglot'
Plugin 'jreybert/vimagit'
Plugin 'felixhummel/setcolors.vim'
Plugin 'flazz/vim-colorschemes' 
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin on
" " filetype plugin indent on    " required
<<<<<<< HEAD
" " To ignore plugin indent changes, instead use:
" "
" " Brief help
" " :PluginList       - lists configured plugins
" " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" " :PluginSearch foo - searches for foo; append `!` to refresh local cache
" " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" "
" " see :h vundle for more details or wiki for FAQ
" " Put your non-Plugin stuff after this line
" 
" " ------------- Plugin configs ----------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set laststatus=2 
" 
" " ------------- Indentation stuff ---------
=======
>>>>>>> 76c2729ec8683522113ca811a2ced092cfe94cbb
set smartindent
" ------------ Keyboard shortcuts ---------
set timeoutlen=700 ttimeoutlen=0
" Go to visual from insert mode
inoremap <C-v> <Esc><C-v>
inoremap <C-v><C-v> <Esc>V
nnoremap <C-v><C-v> V
" Go to search from insert mode
inoremap <C-f> <Esc>/
"  Duplicate line
nnoremap <C-d> yyp
inoremap <C-d> <Esc>yypi
"  Remove whole line (yes, dd works well too)
inoremap <C-d><C-d> <C-o>"_dd
nnoremap <C-d><C-d> "_dd
" Remap Ctrl+S for surround line
inoremap <C-o> <C-o>ys
nnoremap <C-o> ys
" Change dir to file's dir (force)
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>
" Remap F1 to wq 
nmap <F1> :wq<CR>
imap <F1> <Esc>:wq<CR>
" Move lines up/down
" For moving lines (^] is a special character; use <M-k> and <M-j> if it works)
nnoremap <A-up> mz:m-2<CR>`z==
inoremap <A-down> <Esc>:m+<CR>==gi
inoremap <A-up> <Esc>:m-2<CR>==gi
vnoremap <A-down> :m'>+<CR>gv=`<my`>mzgv`yo`z
nnoremap <A-down> mz:m+<CR>`z==
vnoremap <A-up> :m'<-2<CR>gv=`>my`<mzgv`yo`z
" Disable highlighting search results
let hlstate=0
nnoremap <F2> :if (hlstate%2 == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstat
" Disabble paste-over removing registry
vnoremap p "_p
vnoremap P "_P
" Allow moving over next line and previous line
set whichwrap+=>,l
set whichwrap+=<,h
" ------------ Coloring stuff ---------

syntax on
set background=dark
color synthwave
let g:airline_theme='synthwave'

if has('termguicolors')
  set termguicolors " 24-bit terminal
else
  let g:synthwave_termcolors=256 " 256 color mode
endif
" ------------ GVim Only Stuff ------------
" Prompt before closing last window
nnoremap ZZ :call QuitPrompt()<cr>
" nnoremap :wq :call QuitPrompt()<cr>
cnoreabbrev wq call QuitPrompt()

" Remove useless stuff
set guioptions-=m  "menu bar
set guioptions-=T  "toolbar
set guioptions-=r  "scrollbar



fun! QuitPrompt()
   if has("gui_running") && tabpagenr("$") == 1 && winnr("$") == 1
      let choice = confirm("Close?", "&yes\n&no", 1)
      if choice == 1 | wq | endif
   else | wq | endif
endfun

" ------------- Automation -----------
" Set workdir as file dir
autocmd BufEnter * silent! lcd %:p:h
" Go to last file(s) if invoked without arguments.
autocmd VimLeave * nested if (!isdirectory($HOME . "/.vim")) |
    \ call mkdir($HOME . "/.vim") |
    \ endif |
    \ execute "mksession! " . $HOME . "/.vim/Session.vim"

autocmd VimEnter * nested if argc() == 0 && filereadable($HOME . "/.vim/Session.vim") |
    \ execute "source " . $HOME . "/.vim/Session.vim"

"  Remember last edited line and jump to it
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" Persistent undo

" Put plugins and dictionaries in this dir (also on Windows)
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" ------------ Screen space -----------
" Maximize window
if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window (for an alternative on Windows, see simalt below).
  " Use ~x on an English Windows version or ~n for French.
  au GUIEnter * simalt ~x 
  " or use this line for non-windows OS
  " set lines=999 columns=999
else
  " This is console Vim.
  if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=100
  endif
endif


set number
set ruler

" ------------ Remote stuff ------------
let g:netrw_cygwin = 0
let g:netrw_ssh_cmd  = '"D:\dev\PuTTY\plink.exe" -batch -T -ssh'
let g:netrw_scp_cmd  = '"D:\dev\PuTTY\pscp.exe"  -batch -q -scp'
set backspace=indent,eol,start
let g:netrw_sftp_cmd = '"D:\dev\PuTTY\psftp.exe"  -batch -q -sftp'
